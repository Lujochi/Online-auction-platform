generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name                         String    @db.VarChar(50)
  last_name                          String    @db.VarChar(50)
  email                              String    @unique @db.VarChar(255)
  password_hash                      String
  profile_picture                    String?
  phone_number                       String?   @unique @db.VarChar(20)
  cpf                                String?   @unique @db.VarChar(14)
  city                               String?   @db.VarChar(100)
  state                              String?   @db.VarChar(50)
  zip_code                           String?   @db.VarChar(10)
  role                               String    @default("user") @db.VarChar(20)
  created_at                         DateTime? @default(now()) @db.Timestamp(6)
  updated_at                         DateTime? @default(now()) @db.Timestamp(6)
  auctions_auctions_user_idTousers   Auction[] @relation("auctions_user_idTousers")
  auctions_auctions_winner_idTousers Auction[] @relation("auctions_winner_idTousers")
  bids                               Bid[]
  payments                           Payment[]

  @@map("users")
}

model Auction {
  id                              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title                           String   @db.VarChar(255)
  description                     String
  images                          String[]
  starting_price                  Decimal  @db.Decimal(10, 2)
  current_price                   Decimal  @db.Decimal(10, 2)
  status                          String   @default("active") @db.VarChar(10)
  start_time                      DateTime @db.Timestamp(6)
  end_time                        DateTime @db.Timestamp(6)
  user_id                         String   @db.Uuid
  winner_id                       String?  @db.Uuid
  created_at                      DateTime @default(now()) @db.Timestamp(6)
  updated_at                      DateTime @default(now()) @db.Timestamp(6)
  users_auctions_user_idTousers   User     @relation("auctions_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_auction_user")
  users_auctions_winner_idTousers User?    @relation("auctions_winner_idTousers", fields: [winner_id], references: [id], onUpdate: NoAction, map: "fk_auction_winner")
  bids                            Bid[]
  payments                        Payment?

  @@map("auctions")
}

model Bid {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  auction_id String   @db.Uuid
  user_id    String   @db.Uuid
  amount     Decimal  @db.Decimal(10, 2)
  created_at DateTime @default(now()) @db.Timestamp(6)
  auctions   Auction  @relation(fields: [auction_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_bid_auction")
  users      User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_bid_user")

  @@map("bids")
}

model Payment {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  auction_id     String   @unique @db.Uuid
  user_id        String   @db.Uuid
  amount         Decimal  @db.Decimal(10, 2)
  status         String   @default("pending") @db.VarChar(10)
  method         String   @db.VarChar(50)
  transaction_id String?  @unique @db.VarChar(255)
  created_at     DateTime @default(now()) @db.Timestamp(6)
  auctions       Auction  @relation(fields: [auction_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_payment_auction")
  users          User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_payment_user")

  @@map("payments")
}
